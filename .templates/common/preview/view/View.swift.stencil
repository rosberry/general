{% include "header.stencil" %}
{% macro class -p %}{{ name | upperFirstLetter }}{% block view %}View{% endblock %}{% endmacro %}
import UIKit
{% macro variable -p %}{% block variable %}view{% endblock %}{% endmacro %}
final class {% call class %}: {% block superview %}UIView{% endblock %} {

    // MARK: Subviews

    // MARK: Lifecycle

    override init(frame: CGRect) {
        super.init(frame: frame)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    override func layoutSubviews() {
        super.layoutSubviews()
    }

    // MARK: Private

    private func setup() {

    }
}

// MARK: - {% call class %} Xcode preview

#if DEBUG

import SwiftUI

extension {% call class %}: UIViewRepresentable {
    func makeUIView(context: Context) -> {% call class %} {
        let {% call variable %} = {% call class %}()
        return {% call variable %}
    }

    func updateUIView(_ uiViewController: {% call class %},
                      context: Context) {
    }
}

struct {% call class %}Previews: PreviewProvider {
    static var previews: some View {
        group(with: {% block configs%}[.init(name: "Default", layout: .device)]{% endblock %}) {
            let {% call variable %} = {% call class %}()
            return AnyView({% call variable %})
        }
    }
}
#endif
