{% include "header.stencil" %}

import GenericModule

protocol {{ name | upperFirstLetter }}ModuleInput: ModuleInput<{{ name | upperFirstLetter }}State> {

}

protocol {{ name | upperFirstLetter }}ModuleOutput: class {
    func {{ name | lowerFirstLetter }}ModuleClosed(_ moduleInput: {{ name | upperFirstLetter }}ModuleInput)
}

typealias {{ name | upperFirstLetter }}ModuleDependencies = Any

{%align%}final class {{ name | upperFirstLetter }}Module: FactoryModule<{%anchor%}{{ name | upperFirstLetter }}ListItemsFactory,
                                                                        {{ name | upperFirstLetter }}ViewModel,
                                                                        {{ name | upperFirstLetter }}ViewController>{%endalign%} {

{%align%}    typealias Presenter = {{ name | upperFirstLetter }}Module.FactoryPresenter<{%anchor%}{{ name | upperFirstLetter }}ModuleOutput> &
                                                                                        {{ name | upperFirstLetter }}ModuleInput &
                                                                                        {{ name | upperFirstLetter }}ViewOutput{%endalign%}

    override func makeInput() -> BasePresenter {
        {{ name | upperFirstLetter }}Presenter(state: state, dependencies: [])
    }
}
