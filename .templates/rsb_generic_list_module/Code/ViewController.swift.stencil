{% include "header.stencil" %}

import UIKit
import GenericModule
import Base
import CollectionViewTools

final class {{ name | upperFirstLetter}}ViewController: UIViewController {

    var output: ViewOutput?
    var viewModel: {{ name | upperFirstLetter}}ViewModel

    private lazy var collectionViewManager: CollectionViewManager = .init(collectionView: collectionView)

    // MARK: - Subviews

    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let view = UICollectionView(frame: .zero, collectionViewLayout: layout)
        view.backgroundColor = .clear
        view.alwaysBounceVertical = true
        return view
    }()

    // MARK: - Lifecycle

    init(viewModel: {{ name | upperFirstLetter}}ViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(collectionView)
        output?.viewDidLoad()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionView.frame = view.bounds
    }

}

extension {{ name | upperFirstLetter}}ViewController: ViewInput, ForceViewUpdate {
    func update(with viewModel: {{ name | upperFirstLetter}}ViewModel, force: Bool, animated: Bool) {
        let oldViewModel = self.viewModel
        self.viewModel = viewModel

        func updateViewModel<Value: Equatable>(_ keyPath: KeyPath<{{ name | upperFirstLetter}}ViewModel, Value>, configurationBlock: (Value) -> Void) {
            update(new: viewModel, old: oldViewModel, keyPath: keyPath, force: force, configurationHandler: configurationBlock)
        }

        collectionViewManager.update(with: viewModel.listSectionItems, animated: animated)
    }
}