{% include "header.stencil" %}

import UIKit
import GenericModule
import Base
import CollectionViewTools

protocol {{ name | upperFirstLetter}}ViewOutput: ViewOutput {

}

final class {{ name | upperFirstLetter}}ViewController: UIViewController {

    var output: {{ name | upperFirstLetter}}ViewOutput?
    var viewModel: {{ name | upperFirstLetter}}ViewModel

    private lazy var collectionViewManager: CollectionViewManager = .init(collectionView: collectionView)

    // MARK: - Subviews

    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .clear
        collectionView.alwaysBounceVertical = true
        return collectionView
    }()

    // MARK: - Lifecycle

    init(viewModel: {{ name | upperFirstLetter}}ViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(collectionView)
        output?.viewDidLoad()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionView.frame = view.bounds
    }
}

extension {{ name | upperFirstLetter}}ViewController: ViewInput {
    func update(with viewModel: {{ name | upperFirstLetter}}ViewModel, force: Bool, animated: Bool) {
        let oldViewModel = self.viewModel
        self.viewModel = viewModel

        let updateViewModel = Update(newModel: viewModel, oldModel: oldViewModel, force: force)

        collectionViewManager.update(with: viewModel.listSectionItems, animated: animated)
    }
}

{% include "preview/view_controller/generic.stencil" %}
