{% include "header.stencil" %}

import UIKit
import GenericModule
import Base
import CollectionViewTools

protocol {{ name | upperFirstLetter}}ViewOutput: ViewOutput {

}

final class {{ name | upperFirstLetter}}ViewController: UIViewController {

    var output: {{ name | upperFirstLetter}}ViewOutput?
    var viewModel: {{ name | upperFirstLetter}}ViewModel

    private lazy var collectionViewManager: CollectionViewManager = .init(collectionView: collectionView)

    // MARK: - Subviews

    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let view = UICollectionView(frame: .zero, collectionViewLayout: layout)
        view.backgroundColor = .clear
        view.alwaysBounceVertical = true
        return view
    }()

    // MARK: - Lifecycle

    init(viewModel: {{ name | upperFirstLetter}}ViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(collectionView)
        output?.viewDidLoad()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionView.frame = view.bounds
    }

}

extension {{ name | upperFirstLetter}}ViewController: ViewInput {
    func update(with viewModel: {{ name | upperFirstLetter}}ViewModel, force: Bool, animated: Bool) {
        let oldViewModel = self.viewModel
        self.viewModel = viewModel

        let updateViewModel = Update(newModel: viewModel, oldModel: oldViewModel, force: force)

        collectionViewManager.update(with: viewModel.listSectionItems, animated: animated)
    }
}

// MARK: - {{ name | upperFirstLetter }}ViewController Xcode preview

#if DEBUG
import SwiftUI

final class Preview{{ name | upperFirstLetter  }}ModuleOutput: {{ name | upperFirstLetter  }}ModuleOutput {
    func thirdModuleClosed(_ moduleInput: ThirdModuleInput) {
    }
}

extension {{ name | upperFirstLetter  }}ViewController: UIViewControllerRepresentable {
    func makeUIViewController(context: Context) -> {{ name | upperFirstLetter  }}ViewController {
        {{ name | upperFirstLetter  }}Module(state: .init(), output: Preview{{ name | upperFirstLetter  }}ModuleOutput()).viewController
    }

    func updateUIViewController(_ uiViewController: {{ name | upperFirstLetter  }}ViewController,
      context: Context) {
    }
}

struct {{ name | upperFirstLetter  }}ViewControllerPreviews: PreviewProvider {
    static var previews: some View {
        {{ name | upperFirstLetter  }}Module(state: .init(), output: Preview{{ name | upperFirstLetter  }}ModuleOutput()).viewController
    }
}
#endif
