{% include "header.stencil" %}

protocol {{ name | upperFirstLetter }}ModuleInput: class {

    var state: {{ name | upperFirstLetter }}State { get }
    func update(force: Bool, animated: Bool)
}

protocol {{ name | upperFirstLetter }}ModuleOutput: class {

    func {{ name | lowerFirstLetter }}ModuleClosed(_ moduleInput: {{ name | upperFirstLetter }}ModuleInput)
}

final class {{ name | upperFirstLetter }}Module {

    var input: {{ name | upperFirstLetter }}ModuleInput {
        return presenter
    }
    var output: {{ name | upperFirstLetter }}ModuleOutput? {
        get {
            return presenter.output
        }
        set {
            presenter.output = newValue
        }
    }
    let viewController: {{ name | upperFirstLetter }}ViewController
    private let presenter: {{ name | upperFirstLetter }}Presenter

    init(state: {{ name | upperFirstLetter }}State = .init()) {
        let listItemsFactory = {{ name | upperFirstLetter }}ListItemsFactory()
        let presenter = {{ name | upperFirstLetter }}Presenter(state: state, dependencies: [Any](), listItemsFactory: listItemsFactory)
        let viewModel = {{ name | upperFirstLetter }}ViewModel(state: state, listItemsFactory: listItemsFactory)
        let viewController = {{ name  | upperFirstLetter }}ViewController(viewModel: viewModel, output: presenter)
        listItemsFactory.output = presenter
        listItemsFactory.viewController = viewController
        presenter.view = viewController
        self.viewController = viewController
        self.presenter = presenter
    }
}
