{% include "header.stencil" %}

final class {{ name }}Presenter {

    typealias Dependencies = Any

    weak var view: {{ name }}ViewInput?
    weak var output: {{ name }}ModuleOutput?

    var state: {{ name | capitalize }}State

    private let dependencies: Dependencies
    private let listItemsFactory: {{ name }}ListItemsFactory

    init(state: {{ name }}State,
         dependencies: Dependencies,
         listItemsFactory: {{ name }}ListItemsFactory) {
        self.state = state
        self.dependencies = dependencies
        self.listItemsFactory = listItemsFactory
    }
}

// MARK: - {{ name }}ViewOutput

extension {{ name }}Presenter: {{ name }}ViewOutput {

    func viewDidLoad() {
        update(force: true, animated: false)
    }
}

// MARK: - {{ name }}ModuleInput

extension {{ name }}Presenter: {{ name }}ModuleInput {

    func update(force: Bool = false, animated: Bool) {
        let viewModel = {{ name }}ViewModel(state: state, listItemsFactory: listItemsFactory)
        view?.update(with: viewModel, force: force, animated: animated)
    }
}
