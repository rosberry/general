{% include "header.stencil" %}

final class {{ name | upperFirstLetter }}Presenter {

    typealias Dependencies = Any

    weak var view: {{ name | upperFirstLetter }}ViewInput?
    weak var output: {{ name | upperFirstLetter }}ModuleOutput?

    var state: {{ name | upperFirstLetter }}State

    private let dependencies: Dependencies

    init(state: {{ name | upperFirstLetter }}State, dependencies: Dependencies) {
        self.state = state
        self.dependencies = dependencies
    }
}

// MARK: - {{ name | upperFirstLetter }}ViewOutput

extension {{ name | upperFirstLetter }}Presenter: {{ name | upperFirstLetter }}ViewOutput {

    func viewDidLoad() {
        update(force: true, animated: false)
    }
}

// MARK: - {{ name | upperFirstLetter }}ModuleInput

extension {{ name | upperFirstLetter }}Presenter: {{ name | upperFirstLetter }}ModuleInput {

    func update(force: Bool = false, animated: Bool) {
        let viewModel = {{ name | upperFirstLetter }}ViewModel(state: state)
        view?.update(with: viewModel, force: force, animated: animated)
    }
}
