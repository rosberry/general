#compdef general
local context state state_descr line
_general_commandname=$words[1]
typeset -A opt_args

_general() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Print help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'gen:Generates modules from templates.'
                'create:Creates a new template.'
                'list:List of available templates.'
                'setup:Provides your environment with templates'
                'config:Provides an access to config file'
                'upgrade:Upgrades general to specified version'
                'help:Show subcommand help information.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (gen)
                    _general_gen
                    ;;
                (create)
                    _general_create
                    ;;
                (list)
                    _general_list
                    ;;
                (setup)
                    _general_setup
                    ;;
                (config)
                    _general_config
                    ;;
                (upgrade)
                    _general_upgrade
                    ;;
                (help)
                    _general_help
                    ;;
            esac
            ;;
    esac

    return ret
}

_general_gen() {
    integer ret=1
    local -a args
    args+=(
        '(--path -p)'{--path,-p}'[The path for the project.]:path:_files -/'
        '(--name -n)'{--name,-n}'[The name of the module.]:name:'
        '(--template -t)'{--template,-t}'[The name of the template.]:template:{_custom_completion $_general_commandname ---completion gen -- --template $words}'
        '(--output -o)'{--output,-o}'[The output for the template.]:output:_files -/'
        ':variables:'
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_create() {
    integer ret=1
    local -a args
    args+=(
        '(--template -t)'{--template,-t}'[The name of the template.]:template:'
        '(--path -p)'{--path,-p}'[The path for the template.]:path:_files -/'
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_list() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_setup() {
    integer ret=1
    local -a args
    args+=(
        '(--repo -r)'{--repo,-r}'[Fetch templates from specified github repo. Format: "<github>\\ \[branch\]".]:repo:{_custom_completion $_general_commandname ---completion setup -- --repo $words}'
        '(--global -g)'{--global,-g}'[If specified loads templates into user home directory]:global:'
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_config() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Print help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'print:Displays content of .config file'
                'reset:Sets .config file to its default value'
                'repo:Allows to add templates repo for easy setup'
                'use:Set default executable instance for specific command'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (print)
                    _general_config_print
                    ;;
                (reset)
                    _general_config_reset
                    ;;
                (repo)
                    _general_config_repo
                    ;;
                (use)
                    _general_config_use
                    ;;
            esac
            ;;
    esac

    return ret
}

_general_config_print() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_config_reset() {
    integer ret=1
    local -a args
    args+=(
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_config_repo() {
    integer ret=1
    local -a args
    args+=(
        ':github-path:'
        '--as[Specifies short repo alias]:as:'
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_config_use() {
    integer ret=1
    local -a args
    args+=(
        '(--executable -e)'{--executable,-e}'[The executable instance for the command]:executable:{_custom_completion $_general_commandname ---completion config use -- --executable $words}'
        '--for[The name on the commant]:for:'
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_upgrade() {
    integer ret=1
    local -a args
    args+=(
        ':version:{_custom_completion $_general_commandname ---completion upgrade -- version $words}'
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_general_help() {
    integer ret=1
    local -a args
    args+=(
        ':subcommands:'
        '(-h --help)'{-h,--help}'[Print help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}


_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
}

_general
